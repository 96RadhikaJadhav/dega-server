basePath: /
definitions:
  category.category:
    properties:
      description:
        type: string
      medium_id:
        type: integer
      name:
        type: string
      parent_id:
        type: integer
      slug:
        type: string
    type: object
  claim.claim:
    properties:
      checked_date:
        type: string
      claim:
        type: string
      claim_date:
        type: string
      claim_sources:
        type: string
      claimant_id:
        type: integer
      description:
        type: string
      rating_id:
        type: integer
      review:
        type: string
      review_sources:
        type: string
      review_tag_line:
        type: string
      slug:
        type: string
      space_id:
        type: integer
    type: object
  claimant.claimant:
    properties:
      description:
        type: string
      medium_id:
        type: integer
      name:
        type: string
      slug:
        type: string
      space_id:
        type: integer
      tag_line:
        type: string
    type: object
  medium.medium:
    properties:
      alt_text:
        type: string
      caption:
        type: string
      description:
        type: string
      dimensions:
        type: string
      file_size:
        type: integer
      name:
        type: string
      slug:
        type: string
      space_id:
        type: integer
      title:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  model.Category:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      medium:
        $ref: '#/definitions/model.Medium'
        type: object
      medium_id:
        type: integer
      name:
        type: string
      parent_id:
        type: integer
      slug:
        type: string
      space_id:
        type: integer
      updated_at:
        type: string
    required:
    - name
    - slug
    type: object
  model.Claim:
    properties:
      checked_date:
        type: string
      claim:
        type: string
      claim_date:
        type: string
      claim_sources:
        type: string
      claimant:
        $ref: '#/definitions/model.Claimant'
        type: object
      claimant_id:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      rating:
        $ref: '#/definitions/model.Rating'
        type: object
      rating_id:
        type: integer
      review:
        type: string
      review_sources:
        type: string
      review_tag_line:
        type: string
      slug:
        type: string
      space_id:
        type: integer
      updated_at:
        type: string
    type: object
  model.Claimant:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      medium:
        $ref: '#/definitions/model.Medium'
        type: object
      medium_id:
        type: integer
      name:
        type: string
      slug:
        type: string
      space_id:
        type: integer
      tag_line:
        type: string
      updated_at:
        type: string
    type: object
  model.Medium:
    properties:
      alt_text:
        type: string
      caption:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      dimensions:
        type: string
      file_size:
        type: integer
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
      space_id:
        type: integer
      title:
        type: string
      type:
        type: string
      updated_at:
        type: string
      url:
        type: string
    type: object
  model.Rating:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      medium:
        $ref: '#/definitions/model.Medium'
        type: object
      medium_id:
        type: integer
      name:
        type: string
      numeric_value:
        type: string
      slug:
        type: string
      space_id:
        type: integer
      updated_at:
        type: string
    type: object
  model.Space:
    properties:
      contact_info:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      fav_icon_id:
        type: integer
      id:
        type: integer
      logo_id:
        type: integer
      logo_mobile_id:
        type: integer
      mobile_icon_id:
        type: integer
      name:
        type: string
      organisation_id:
        type: integer
      site_address:
        type: string
      site_title:
        type: string
      slug:
        type: string
      social_media_urls:
        type: string
      tag_line:
        type: string
      updated_at:
        type: string
      verification_codes:
        type: string
    type: object
  model.Tag:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
      space_id:
        type: integer
      updated_at:
        type: string
    required:
    - name
    - slug
    type: object
  space.orgWithSpace:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      permission:
        $ref: '#/definitions/space.organizationUser'
        type: object
      slug:
        type: string
      spaces:
        items:
          $ref: '#/definitions/model.Space'
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  space.organizationUser:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      role:
        type: string
      updated_at:
        type: string
    type: object
  space.space:
    properties:
      contact_info:
        type: string
      description:
        type: string
      fav_icon_id:
        type: integer
      logo_id:
        type: integer
      logo_mobile_id:
        type: integer
      mobile_icon_id:
        type: integer
      name:
        type: string
      organisation_id:
        type: integer
      site_address:
        type: string
      site_title:
        type: string
      slug:
        type: string
      social_media_urls:
        type: string
      tag_line:
        type: string
      verification_codes:
        type: string
    type: object
  tag.tag:
    properties:
      description:
        type: string
      name:
        type: string
      slug:
        type: string
      spaceID:
        type: integer
    type: object
host: localhost:8820
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Dega server API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Dega API
  version: "1.0"
paths:
  /core/categories:
    get:
      description: Get all categories
      operationId: get-all-categories
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Category'
            type: array
      summary: Show all categories
      tags:
      - Category
    post:
      description: Create category
      operationId: add-category
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Category Object
        in: body
        name: Category
        required: true
        schema:
          $ref: '#/definitions/category.category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Category'
      summary: Create category
      tags:
      - Category
  /core/categories/{category_id}:
    delete:
      description: Delete category by ID
      operationId: delete-category-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a category
      tags:
      - Category
    get:
      description: Get category by ID
      operationId: get-category-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      summary: Show a category by id
      tags:
      - Category
    put:
      description: Update category by ID
      operationId: update-category-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: string
      - description: Category
        in: body
        name: Category
        schema:
          $ref: '#/definitions/category.category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      summary: Update a category by id
      tags:
      - Category
  /core/media:
    get:
      description: Get all media
      operationId: get-all-media
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Medium'
            type: array
      summary: Show all media
      tags:
      - Medium
    post:
      description: Create medium
      operationId: add-medium
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Medium Object
        in: body
        name: Medium
        required: true
        schema:
          $ref: '#/definitions/medium.medium'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Medium'
      summary: Create medium
      tags:
      - Medium
  /core/media/{medium_id}:
    delete:
      description: Delete medium by ID
      operationId: delete-medium-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Medium ID
        in: path
        name: medium_id
        required: true
        type: string
      responses:
        "200": {}
      summary: Delete a medium
      tags:
      - Medium
    get:
      description: Get medium by ID
      operationId: get-medium-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Medium ID
        in: path
        name: medium_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Medium'
      summary: Show a medium by id
      tags:
      - Medium
    put:
      description: Update medium by ID
      operationId: update-medium-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Medium ID
        in: path
        name: medium_id
        required: true
        type: string
      - description: Medium
        in: body
        name: Medium
        schema:
          $ref: '#/definitions/medium.medium'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Medium'
      summary: Update a medium by id
      tags:
      - Medium
  /core/spaces:
    post:
      description: Create space
      operationId: add-space
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Space Object
        in: body
        name: Space
        required: true
        schema:
          $ref: '#/definitions/space.space'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Space'
      summary: Create space
      tags:
      - Space
  /core/spaces/my:
    get:
      description: Get all spaces
      operationId: get-all-spaces
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/space.orgWithSpace'
            type: array
      summary: Show all spaces
      tags:
      - Space
  /core/tags:
    get:
      description: Get all tags
      operationId: get-all-tags
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Tag'
            type: array
      summary: Show all tags
      tags:
      - Tag
    post:
      description: Create tag
      operationId: add-tag
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Tag Object
        in: body
        name: Tag
        required: true
        schema:
          $ref: '#/definitions/tag.tag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Tag'
      summary: Create tag
      tags:
      - Tag
  /core/tags/{tag_id}:
    delete:
      description: Delete tag by ID
      operationId: delete-tag-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Tag ID
        in: path
        name: tag_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a tag
      tags:
      - Tag
    get:
      description: Get tag by ID
      operationId: get-tag-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Tag ID
        in: path
        name: tag_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Tag'
      summary: Show a tag by id
      tags:
      - Tag
    put:
      description: Update tag by ID
      operationId: update-tag-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Tag ID
        in: path
        name: tag_id
        required: true
        type: string
      - description: Tag
        in: body
        name: Tag
        schema:
          $ref: '#/definitions/tag.tag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Tag'
      summary: Update a tag by id
      tags:
      - Tag
  /factcheck/claimants:
    get:
      description: Get all claimants
      operationId: get-all-claimants
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Claimant'
            type: array
      summary: Show all claimants
      tags:
      - Claimant
    post:
      description: Create claimant
      operationId: add-claimant
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Claimant Object
        in: body
        name: Claimant
        required: true
        schema:
          $ref: '#/definitions/claimant.claimant'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Claimant'
      summary: Create claimant
      tags:
      - Claimant
  /factcheck/claimants/{claimant_id}:
    delete:
      description: Delete claimant by ID
      operationId: delete-claimant-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Claimant ID
        in: path
        name: claimant_id
        required: true
        type: string
      responses:
        "200": {}
      summary: Delete a claimant
      tags:
      - Claimant
    get:
      description: Get claimant by ID
      operationId: get-claimant-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Claimant ID
        in: path
        name: claimant_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Claimant'
      summary: Show a claimant by id
      tags:
      - Claimant
    put:
      description: Update claimant by ID
      operationId: update-claimant-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Claimant ID
        in: path
        name: claimant_id
        required: true
        type: string
      - description: Claimant
        in: body
        name: Claimant
        schema:
          $ref: '#/definitions/claimant.claimant'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Claimant'
      summary: Update a claimant by id
      tags:
      - Claimant
  /factcheck/claims:
    get:
      description: Get all claims
      operationId: get-all-claims
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Claim'
            type: array
      summary: Show all claims
      tags:
      - Claim
    post:
      description: Create claim
      operationId: add-claim
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Claim Object
        in: body
        name: Claim
        required: true
        schema:
          $ref: '#/definitions/claim.claim'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Claim'
      summary: Create claim
      tags:
      - Claim
  /factcheck/claims/{claim_id}:
    delete:
      description: Delete claim by ID
      operationId: delete-claim-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Claim ID
        in: path
        name: claim_id
        required: true
        type: string
      responses:
        "200": {}
      summary: Delete a claim
      tags:
      - Claim
    get:
      description: Get claim by ID
      operationId: get-claim-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Claim ID
        in: path
        name: claim_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Claim'
      summary: Show a claim by id
      tags:
      - Claim
    put:
      description: Update claim by ID
      operationId: update-claim-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Claim ID
        in: path
        name: claim_id
        required: true
        type: string
      - description: Claim
        in: body
        name: Claim
        schema:
          $ref: '#/definitions/claim.claim'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Claim'
      summary: Update a claim by id
      tags:
      - Claim
swagger: "2.0"
